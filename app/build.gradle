apply plugin: 'com.inspur.comgradle'
//apply plugin: 'com.alipay.apollo.baseline.platform'
import com.android.build.OutputFile




/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
// 默认32位Apk,需要64位Apk的话改成true；
def enableSeparateBuildPerCPUArchitecture = false
// NR
def useIntlJsc = false
/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false
Properties properties = new Properties()
properties.load(new FileInputStream(rootProject.projectDir.parent+SIGN_PROPERTIES))
android {
    signingConfigs {
        config {
            keyAlias properties.getProperty("KEY_ALIAS")
            keyPassword properties.getProperty("KEY_PASSWORD")
            storeFile file(properties.getProperty("KEY_STORE_FILE_PATH"))
            storePassword properties.getProperty("KEY_PASSWORD")
        }
    }
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.androidTools
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    def isDebug = false
    for(String s : gradle.startParameter.taskNames) {
        if (s.contains("Debug") | s.contains("debug")) {
            isDebug = true
            break
        }
    }
    packagingOptions {
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    }
    if (isDebug) {
        splits.abi.enable = false
        splits.density.enable = false
    }
//    else {
//        apply from: "../node_modules/react-native/react.gradle"
//        apply from: "../node_modules/react-native-vector-icons/fonts.gradle"
//        apply from: 'tinkerpatch.gradle'
//    }
    defaultConfig {
        applicationId "com.inspur.emmcloud"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
//        versionCode 128 升级更新以version为判断依据
        versionCode 204
        //版本号范例：1.0.0-beta.1, 1.0.0-rc.1, 1.0.0
//        versionName "4.8.19"
        versionName "5.3.0-beta.4"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        ndk {
//            if (enableSeparateBuildPerCPUArchitecture) {
//                abiFilters 'arm64-v8a'
//            } else {
//                abiFilters "armeabi-v7a", "x86"
//            }
            abiFilters "armeabi-v7a", 'arm64-v8a'
        }
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
//        manifestPlaceholders = [
//                PKG_NAME:applicationId
//        ]
    }
    sourceSets.main {
        jniLibs.srcDirs = ['libs']
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.config
        }
    }
    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation', 'ExtraTranslation','TypographyFractions','TypographyQuotes'
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.all { output ->
                def outputFile = output.outputFile
                def fileName
                def abi = output.getFilter(com.android.build.OutputFile.ABI)
                if (variant.buildType.name.equals('release')) {
                    fileName = "inspur_cloud_mobileclient_release_${defaultConfig.versionName}${abi?"_"+abi:""}.apk"
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "inspur_cloud_mobileclient_debug_${defaultConfig.versionName}${abi?"_"+abi:""}.apk"
                }
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    outputFileName = fileName
                }
            }
        }
    }

//    splits {
//        abi {
//            reset()
//            enable enableSeparateBuildPerCPUArchitecture
//            universalApk false
//            if (enableSeparateBuildPerCPUArchitecture) {
//                include 'arm64-v8a'
//            } else {
//                include "armeabi-v7a", "x86"
//            }
//        }
//    }
    // applicationVariants are e.g. debug, release
    //android studio对于jni调用及运行闪退无法加载库的问题解决方案
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    if (isDebug){
        tasks.whenTaskAdded { task ->
            if (task.name.contains("lint")
                    ||task.name.contains("Aidl")//用不到测试的时候就可以先关闭
                    ||task.name.contains("mockableAndroidJar")
                    ||task.name.contains("UnitTest")
                    ||task.name.contains("AndroidTest")//用不到NDK和JNI的也关闭掉
            ) {
                task.enabled = false
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

combuild {
    applicationName = 'com.inspur.emmcloud.MyApplication'
    isRegisterCompoAuto = false
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':basemodule')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    annotationProcessor deps.ARouter.router_anno
    implementation deps.butterknife.butterknife
    annotationProcessor deps.butterknife.butterknife_compiler
    implementation 'androidx.appcompat:appcompat:1.0.0'

//    implementation deps.react
    // JSC from node_modules
    if (useIntlJsc) {
        implementation 'org.webkit:android-jsc-intl:+'
    } else {
        implementation 'org.webkit:android-jsc:+'
    }
    // 移除RN服务支持
//    implementation deps.react
    // React Naive Components
//    implementation project(':react-native-smart-swipe-refresh-layout')
//    implementation project(':react-native-picker')
//    implementation project(':react-native-svg')
//    implementation project(':react-native-vector-icons')
//    implementation project(':react-native-navigation')
    //无需引入tinker的任何库,使用tinkerpatch sdk即可
//    implementation("com.tinkerpatch.sdk:tinkerpatch-android-sdk:${TINKERPATCH_VERSION}") {
//        changing = true
//    }
}

//class BuildTimeListener implements TaskExecutionListener,BuildListener{
//    private Clock clock;
//    private times = []
//
//    @Override
//    void buildStarted(Gradle gradle) {
//    }
//
//    @Override
//    void beforeExecute(Task task) {
//        clock = new org.gradle.util.Clock()
//    }
//
//    @Override
//    void settingsEvaluated(Settings settings) {
//    }
//
//    @Override
//    void afterExecute(Task task, TaskState state) {
//        def ms = clock.getTimeInMs()
//        times.add([ms, task.path])
//    }
//
//    @Override
//    void projectsLoaded(Gradle gradle) {
//    }
//
//    @Override
//    void projectsEvaluated(Gradle gradle) {
//    }
//
//    @Override
//    void buildFinished(BuildResult result) {
//        println "Task spend time:====================================="
//        for (time in times) {
//            if (time[0] >= 50) {
//                printf "%7sms  %s\n", time
//            }
//        }
//    }
//}
//
////将监听器添加到 gradle任务中
//project.gradle.addListener(new BuildTimeListener());